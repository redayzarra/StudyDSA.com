generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  basic
  intermediate
  advanced
}

model User {
  id                String              @id @default(cuid())
  name              String?
  username          String?             @unique
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole            @default(USER)
  accounts          Account[]
  chapterProgress   ChapterProgress[]
  algorithmProgress AlgorithmProgress[]
  topicProgress     TopicProgress[]
  Bookmark          Bookmark?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// For tracking progress
model Topic {
  id          String          @id @default(cuid())
  title       String          @unique
  description String
  href        String
  chapters    Chapter[]
  progress    TopicProgress[]
}

model TopicProgress {
  id         Int     @id @default(autoincrement())
  userId     String
  topicId    String
  isComplete Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic      Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
}

model Chapter {
  id          String            @id @default(cuid())
  title       String
  description String
  href        String
  topicId     String
  topic       Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  progress    ChapterProgress[]
  Bookmark    Bookmark?
}

model ChapterProgress {
  id         Int     @id @default(autoincrement())
  userId     String
  chapterId  String
  isComplete Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model Algorithm {
  id          String              @id @default(cuid())
  title       String
  description String
  href        String
  difficulty  Difficulty
  progress    AlgorithmProgress[]
  Bookmark    Bookmark?
}

model AlgorithmProgress {
  id          Int       @id @default(autoincrement())
  userId      String
  algorithmId String
  isComplete  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  algorithm   Algorithm @relation(fields: [algorithmId], references: [id], onDelete: Cascade)

  @@unique([userId, algorithmId])
}

model Bookmark {
  id          String   @id @default(cuid())
  userId      String   @unique
  chapterId   String?  @unique
  algorithmId String?  @unique
  createdAt   DateTime @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter?   @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  algorithm Algorithm? @relation(fields: [algorithmId], references: [id], onDelete: SetNull)

  @@index([userId], name: "idx_bookmark_user")
}
