generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  basic
  intermediate
  advanced
}

model User {
  id                String              @id @default(cuid())
  name              String?
  username          String?             @unique
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole            @default(USER)
  accounts          Account[]
  chapterProgress   ChapterProgress[]
  algorithmProgress AlgorithmProgress[]
  topicProgress     TopicProgress[]
  Bookmark          Bookmark?
  problemProgress   ProblemProgress[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// For tracking progress
model Topic {
  id          Int             @id @default(autoincrement())
  title       String          @unique
  description String
  href        String
  chapters    Chapter[]
  progress    TopicProgress[]
}

model TopicProgress {
  id         Int     @id @default(autoincrement())
  userId     String
  topicId    Int
  isComplete Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic      Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
}

model Chapter {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  href        String
  topicId     Int
  topic       Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  progress    ChapterProgress[]
  Bookmark    Bookmark[]
}

model ChapterProgress {
  id         Int     @id @default(autoincrement())
  userId     String
  chapterId  Int
  isComplete Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
}

model Algorithm {
  id          Int                 @id @default(autoincrement())
  title       String
  description String
  href        String
  difficulty  Difficulty
  progress    AlgorithmProgress[]
  Bookmark    Bookmark[]
}

model AlgorithmProgress {
  id          Int       @id @default(autoincrement())
  userId      String
  algorithmId Int
  isComplete  Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  algorithm   Algorithm @relation(fields: [algorithmId], references: [id], onDelete: Cascade)

  @@unique([userId, algorithmId])
}

model Bookmark {
  id          String @id @default(cuid())
  userId      String
  chapterId   Int?
  algorithmId Int?

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter   Chapter?   @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  algorithm Algorithm? @relation(fields: [algorithmId], references: [id], onDelete: SetNull)

  @@unique([userId])
  @@index([chapterId], name: "idx_bookmark_chapter")
  @@index([algorithmId], name: "idx_bookmark_algorithm")
}

enum QuestionDifficulty {
  Easy
  Medium
  Hard
}

enum MasteryLevel {
  Practicing
  Mastered
  Review
  Challenging
}

model ProblemTag {
  id       String            @id @default(cuid())
  tag      String            @unique
  problems LeetCodeProblem[]
}

model LeetCodeProblem {
  id         Int                @id @default(autoincrement())
  title      String             @unique
  href       String
  difficulty QuestionDifficulty
  tags       ProblemTag[]
  videoURL   String?
  solution   String?            @db.Text

  ProblemProgress ProblemProgress[]
}

model ProblemProgress {
  id           Int             @id @default(autoincrement())
  userId       String
  problemId    Int
  isComplete   Boolean         @default(false)
  masteryLevel MasteryLevel    @default(Practicing)
  notes        String?         @db.Text
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem      LeetCodeProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
