// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole       @default(USER)
  accounts      Account[]
  userProgress  UserProgress[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Topic {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  href        String
  chapters    Chapter[]
}

model Chapter {
  id          String         @id @default(cuid())
  name        String
  description String
  href        String
  topicId     String
  topic       Topic          @relation(fields: [topicId], references: [id])
  progress    UserProgress[]
}

model UserProgress {
  id         Int     @id @default(autoincrement())
  userId     String
  chapterId  String
  isComplete Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  chapter    Chapter @relation(fields: [chapterId], references: [id])

  @@unique([userId, chapterId])
}
